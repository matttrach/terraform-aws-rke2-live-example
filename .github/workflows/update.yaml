name: update

on:
  # only on dispatch
  workflow_dispatch:

# WARNING! this applies the current terraform config and will overwrite state

env:
  AWS_REGION: us-west-1
  AWS_ROLE: arn:aws:iam::270074865685:role/terraform-module-ci-test
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  GITHUB_OWNER: ${{ github.repository_owner }}

permissions: write-all

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}
          role-session-name: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
          aws-region: ${{env.AWS_REGION}}
      - uses: haythem/public-ip@v1.3
        id: ip
      - name: Apply
        shell: bash
        run: |
          if [ "" = "${{secrets.AGE_SECRET_KEY}}" ]; then echo "Missing encrypt key, please run repo setup before update."; exit 1; fi
          if [ "" = "${{secrets.SSH_PRIVATE_KEY}}" ]; then echo "Missing CI ssh access key, please run repo setup before update."; exit 1; fi
          if [ ! -f age_recipients.txt ]; then echo "Missing encryption recipients, please run repo setup before update."; exit 1; fi
          if [ ! -f terraform.tfstate.age ]; then echo "Missing initial encrypted terraform state, please run repo setup before update."; exit 1; fi
          eval "$(ssh-agent -s)"
          ssh-add <<< "$(base64 -d <<< ${{secrets.SSH_PRIVATE_KEY}})"
          echo '${{secrets.AGE_SECRET_KEY}}' | age -d -i - -o terraform.tfstate <<< "$(base64 -d terraform.tfstate.age)"
          export TF_VAR_ip="${{ steps.ip.outputs.ipv4 }}"
          terraform init
          # manage the security group rule for the terraform runner as a separate entity to prevent dependency chain issues with server object
          if [ "" = "$(terraform state list | grep 'module.aws_rke2_rhel9_rpm.module.aws_access.module.security_group.aws_vpc_security_group_egress_rule.to_ip[0]')" ]; then
            terraform apply --auto-approve -target=module.aws_rke2_rhel9_rpm.module.aws_access.module.security_group.aws_vpc_security_group_egress_rule.to_ip[0] || true
          fi
          if [ "" = "$(terraform state list | grep 'module.aws_rke2_rhel9_rpm.module.aws_access.module.security_group.aws_vpc_security_group_ingress_rule.from_ip[0]')" ]; then
            terraform apply --auto-approve -target=module.aws_rke2_rhel9_rpm.module.aws_access.module.security_group.aws_vpc_security_group_ingress_rule.from_ip[0] || true
          fi
          terraform apply --auto-approve || true
          sleep 5
          terraform apply --auto-approve || true
          rm -rf terraform.tfstate.age && age -e -R age_recipients.txt -o terraform.tfstate.age terraform.tfstate && rm -f terraform.tfstate
          base64 terraform.tfstate.age > tmp_terraform.tfstate.age
          mv tmp_terraform.tfstate.age terraform.tfstate.age
          git config --global user.name 'automation'
          git config --global user.email 'automation@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{github.repository}}"
          git add terraform.tfstate.age
          git commit -s -m "New State https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          git push origin main
