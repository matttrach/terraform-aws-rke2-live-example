name: release

on:
  push:
    branches:
    - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  GITHUB_OWNER: ${{github.repository_owner}}
  project_name: "livex"
  project_owner: "tf-livex@noreply.com"
  project_cidr: "10.0.255.0/24"
  prototype_subnet_cidr: "10.0.255.224/28" # must be within project_cidr
  production_subnet_cidr: "10.0.255.223/28" # must be within project_cidr and not be the same as the prototype

permissions: write-all

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{env.project_name}}
      project_owner: ${{env.project_owner}}
      project_cidr: ${{env.project_cidr}}
      prototype_subnet_cidr: ${{env.prototype_subnet_cidr}}
      production_subnet_cidr: ${{env.production_subnet_cidr}}
      ci_ssh_key: ${{steps.setup.outputs.ssh_key}}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      - name: setup
        id: setup
        run: |
          while read -r file; do
            if [ -f "$file.age" ]; then
              echo '${{secrets.age-secret-key}}' | age -d -i - -o "$file" "$file.age"
            fi
          done <secret_file_list.txt
          KEY="$(cat /phase_2_ci_access/ssh_key.pub)"
          echo "ssh_key=$KEY" >> "$GITHUB_OUTPUT"

  get_runner_ip:
    runs-on: ubuntu-latest
    needs:
      - env
    outputs:
      ip: steps.ip.outputs.ipv4
    steps:
      - uses: haythem/public-ip@v1.3
        id: ip

  release:
    runs-on: ubuntu-latest
    needs:
      - env
    outputs:
      release_created: steps.release-please.outputs.release_created
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release-please
        with:
          release-type: terraform-module

  plan_project_access:
    needs:
      - env
      - release
    uses: ./.github/workflows/plan.yaml
    with:
      github: ${{ toJson(github) }}
      type: "project_access"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "project_cidr": "${{needs.env.outputs.project_cidr}}"
        }
    secrets: inherit

  plan_ci_access:
    needs:
      - env
      - get_runner_ip
      - release
    uses: ./.github/workflows/plan.yaml
    with:
      github: ${{ toJson(github) }}
      type: "ci_access"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ip": "${{needs.get_runner_ip.outputs.ip}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "ssh_key": "${{needs.env.outputs.ci_ssh_key}}"
        }
    secrets: inherit

  plan_prototype:
    needs:
      - env
      - get_runner_ip
      - release
    uses: ./.github/workflows/plan.yaml
    with:
      github: ${{ toJson(github) }}
      type: "prototype"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ip": "${{needs.get_runner_ip.outputs.ip}}",
          "ssh_key_name": "${{needs.env.outputs.project_name}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "subnet_cidr": "${{needs.env.outputs.prototype_subnet_cidr}}"
        }
    secrets: inherit

  plan_servers:
    needs:
      - env
      - release
    uses: ./.github/workflows/plan.yaml
    with:
      github: ${{ toJson(github) }}
      type: "servers"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{needs.env.outputs.project_name}}",
          "subnet_cidr": "${{needs.env.outputs.production_subnet_cidr}}",
          "image_id": "fake",
          "image_admin_group": "wheel",
          "image_user": "plan",
          "image_workfolder": "~",
          "role": "server"
        }
    secrets: inherit

# these are only run after release is created
  apply_project_access:
    uses: ./.github/workflows/apply.yaml
    if: needs.release.outputs.release_created
    needs:
      - env
      - release
    with:
      github: ${{ toJson(github) }}
      type: "project_access"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "project_cidr": "${{needs.env.outputs.project_cidr}}"
        }
    secrets: inherit

  apply_ci_access:
    uses: ./.github/workflows/apply.yaml
    if: needs.release.outputs.release_created
    needs:
      - env
      - get_runner_ip
      - release
      - apply_project_access
    with:
      github: ${{ toJson(github) }}
      type: "ci_access"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ip": "${{needs.get_runner_ip.outputs.ip}}",
          "ssh_key": "${{needs.env.outputs.ci_ssh_key}}",
          "vpc_name": "${{fromJSON(needs.apply_project_access.outputs.apply_project_access).vpc}}"
        }
    secrets: inherit


  apply_prototype:
    uses: ./.github/workflows/apply.yaml
    if: needs.release.outputs.release_created
    needs:
      - env
      - get_runner_ip
      - release
      - apply_project_access
      - apply_ci_access
    with:
      github: ${{ toJson(github) }}
      type: "prototype"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ip": "${{needs.get_runner_ip.outputs.ip}}",
          "ssh_key_name": "${{fromJson(needs.apply_ci_access.outputs.apply_ci_access).ssh_key_name}}",
          "vpc_name": "${{fromJson(needs.apply_project_access.outputs.apply_project_access).vpc_name}}",
          "subnet_cidr": "${{needs.env.outputs.prototype_subnet_cidr}}"
        }
    secrets: inherit

  apply_servers:
    uses: ./.github/workflows/apply.yaml
    if: needs.release.outputs.release_created
    needs:
      - env
      - release
      - apply_project_access
      - apply_ci_access
      - apply_prototype
    with:
      github: ${{ toJson(github) }}
      type: "servers"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "vpc_name": "${{fromJson(needs.apply_project_access.outputs.apply_project_access).vpc}}",
          "subnet_cidr": "${{needs.env.outputs.production_subnet_cidr}}",
          "image_id": "${{fromJson(needs.apply_prototype.outputs.apply_prototype).image_id}}",
          "image_admin_group": "${{fromJson(needs.apply_prototype.outputs.apply_prototype).image_admin_group}}",
          "image_user": "${{fromJson(needs.apply_prototype.outputs.apply_prototype).image_user}}",
          "image_workfolder": "${{fromJson(needs.apply_prototype.outputs.apply_prototype).image_workfolder}}",
          "role": "${{fromJson(needs.apply_prototype.outputs.apply_prototype).role}}"
        }
    secrets: inherit

  # destroy CI Access after updating servers
  destroy_ci_access:
    uses: ./.github/workflows/apply.yaml
    if: needs.release.outputs.release_created
    needs:
      - env
      - get_runner_ip
      - release
      - apply_ci_access
      - apply_project_access
      - apply_prototype
      - apply_servers
    with:
      github: ${{ toJson(github) }}
      type: "ci_access"
      variables: |
        {
          "project_name": "${{needs.env.outputs.project_name}}",
          "project_owner": "${{needs.env.outputs.project_owner}}",
          "ip": "${{needs.get_runner_ip.outputs.ip}}",
          "vpc_name": "${{fromJson(needs.apply_project_access.outputs.apply_project_access).vpc_name}}"
        }
    secrets: inherit
