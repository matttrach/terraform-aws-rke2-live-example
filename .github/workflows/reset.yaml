name: reset
on:
  # only on dispatch
  workflow_dispatch:

permissions: write-all

env:
  AWS_REGION: "us-west-1"
  AWS_ROLE: "arn:aws:iam::270074865685:role/terraform-module-ci-test"

jobs:
  # this workflow destroys the infrastructure and resets the repo to a clean state
  reset:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}
          role-session-name: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
          aws-region: ${{env.AWS_REGION}}
      - uses: actions/cache/restore@v3
        id: cache-terraform-restore
        with:
          path: ${{ github.workspace }}/.terraform
          key: terraform-${{hashFiles('**/versions.tf','**/main.tf')}}
      - run: terraform init -upgrade
      - uses: actions/cache/save@v3
        id: cache-terraform-save
        with:
          path: ${{ github.workspace }}/.terraform
          key: ${{ steps.cache-terraform-restore.outputs.cache-primary-key }}
      - uses: haythem/public-ip@v1.3
        id: ip
      - name: ResetRepo
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
        run: |
          if [ -f terraform.tfstate.age ]; then
            rm -f terraform.tfstate; echo '${{secrets.AGE_SECRET_KEY}}' | age -d -i - -o terraform.tfstate terraform.tfstate.age
            rm -f terraform.tfstate.age
            export TF_VAR_ip="${{ steps.ip.outputs.ipv4 }}"
            terraform init
            terraform destroy --auto-approve || true
            terraform destroy --auto-approve
          else
            echo "no state found to clean..."
          fi
          rm -rf ssh_key
          rm -rf ssh_key.pub
          rm -rf ssh_key.age
          rm -rf terraform.tfstate
          rm -rf terraform.tfstate.age
          rm -rf age_recipients.txt
          rm -rf .terraform.lock.hcl
          rm -rf flake.lock
          rm -rf CHANGELOG.md
          gh secret delete AGE_SECRET_KEY
          gh secret delete ADMIN_GITHUB_TOKEN
          git config --global user.name 'automation'
          git config --global user.email 'automation@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{github.repository}}"
          git add -A
          git commit -s -m "Reset repo https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          git pull --rebase
          git push -f origin main
          # At this point the repo should be clean to copy
