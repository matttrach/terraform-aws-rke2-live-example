name: setup
# this workflow sets up your repo, run this before first release
# WARNING! this step is not idempotent and is destructive
on:
  # only on dispatch
  workflow_dispatch:

permissions: write-all

env:
  GITHUB_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.ADMIN_GITHUB_TOKEN }}
  GITHUB_OWNER: ${{ github.repository_owner }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: nicknovitski/nix-develop@v1.1.0
        with:
          arguments: |
            --ignore-environment \
            --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            --keep HOME \
            --keep SSH_AUTH_SOCK \
            --keep GITHUB_TOKEN \
            --keep GITHUB_OWNER \
            --keep AWS_ROLE \
            --keep AWS_REGION \
            --keep AWS_DEFAULT_REGION \
            --keep AWS_ACCESS_KEY_ID \
            --keep AWS_SECRET_ACCESS_KEY \
            --keep AWS_SESSION_TOKEN \
            --keep TERM \
            ${{ github.workspace }}
      # if using OICD auth
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{vars.AWS_AUTH == 'OIDC'}}
        with:
          role-to-assume: ${{secrets.AWS_ROLE}}
          role-session-name: ${{github.job}}-${{github.run_id}}-${{github.run_number}}-${{github.run_attempt}}
          aws-region: ${{secrets.AWS_REGION}}
      # if using access key auth
      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{vars.AWS_AUTH == 'IAM'}}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - uses: haythem/public-ip@v1.3
        id: ip
      - run: |
          echo "Setting up Repo..."
          if [ -z "$GITHUB_TOKEN" ]; then echo "token not found, please make sure to add ADMIN_GITHUB_TOKEN to secrets"; exit 1; fi
          if [ -z "${{vars.AWS_AUTH}}" ]; then echo "AWS auth type not found, please specify AWS_AUTH action variable as either 'OIDC' or 'IAM'"; exit 1; fi
          KEY="$(age-keygen 2>/dev/null | grep '^AGE')"
          echo "$KEY" | age-keygen -y > age_recipients.txt
          gh secret set AGE_SECRET_KEY --body "$KEY"
          ssh-keygen -t rsa -b 4096 -C "automation@users.noreply.github.com" -N "" -f ssh_key && rm -f ssh_key.age; age -e -R age_recipients.txt -o ssh_key.age ssh_key && rm -f ssh_key;
          cd setup && terraform init && terraform apply --auto-approve && cd ..

          echo "Saving initial state..."
          export TF_VAR_ip="${{ steps.ip.outputs.ipv4 }}"
          rm -f terraform.tfstate; terraform init -upgrade; terraform plan;
          if [ ! -f terraform.tfstate ]; then 
            cat << 'EOF' > 'terraform.tfstate'
          {
            "version": 4,
            "serial": 3,
            "outputs": {},
            "resources": [],
            "check_results": null
          }
          EOF
          fi;
          rm -rf terraform.tfstate.age && age -e -R age_recipients.txt -o terraform.tfstate.age terraform.tfstate && rm -f terraform.tfstate
          git config --global user.name 'automation'
          git config --global user.email 'automation@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{github.repository}}"
          git add terraform.tfstate.age
          git add ssh_key.pub
          git add ssh_key.age
          git add .terraform.lock.hcl
          git add age_recipients.txt
          git commit -s -m "Setup https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          git push origin main
